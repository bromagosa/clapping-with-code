module main
author unknown
version 1 0 
description ''

script 521 315 {
'rhy wait until beat' 1
forever {
  for i 8 {
    'rhy wait until beat' i
    repeat 8 {
      for beat ('[data:split]' '111011010110' '') {
        'MIDI_play MIDI drum' 'Hand Clap' ('rhy_eighth duration') (beat * 127)
      }
    }
  }
}
}

script 96 317 {
'rhy wait until beat' 1
forever {
  for beat ('[data:split]' '111011010110' '') {
    'MIDI_play MIDI drum' 'Hand Clap' ('rhy_eighth duration') (beat * 127)
  }
}
}


module Lists Data
author MicroBlocks
version 1 7 
choices pick 'a few' some most 
description 'Useful functions for working with lists.
'

  spec 'r' 'list_contains' 'list _ contains _' 'auto auto' 'aList' 'cat'
  space
  spec 'r' 'list_circular' 'circular item _ of _' 'auto auto' '10' 'aListOrString'
  space
  spec 'r' 'list_map' 'map _ over _' 'str.functionNameMenu auto' 'aFunction' 'aList'
  spec 'r' 'list_filter' 'filter _ with _' 'auto str.functionNameMenu' 'aList' 'aFunction'
  spec 'r' 'list_pick' 'pick _ from _' 'menu.pick str' 'some' 'aList'
  spec 'r' 'list_replace' '_ with items _ replaced by _' 'auto auto auto' 'aList' 'indices' 10
  space
  spec ' ' 'list_reverse' 'reverse _' 'auto' 'aList'
  spec ' ' 'list_shuffle' 'shuffle _' 'auto' 'aList'
  spec ' ' 'list_mergesort' 'sort _' 'auto' 'aList'
  spec ' ' 'list_unique' 'unique _' 'auto' 'aList'
  space
  spec 'r' 'list_shuffled' 'shuffled _' 'auto' 'aList'
  spec 'r' 'list_reversed' 'reversed _' 'auto' 'aList'
  spec 'r' 'list_sorted' 'sorted _' 'auto' 'aList'
  spec 'r' 'list_uniqued' 'uniqued _' 'auto' 'aList'
  space
  spec ' ' '_list_mergeStep' '_mergeStep _ _ _ _ _' 'auto num num num auto' 'srcList' 1 2 3 'dstList'

to '_list_mergeStep' src left right end dst {
  local 'i' left
  local 'j' right
  local 'k' left
  repeatUntil (k > end) {
    if (and (i < right) (or (j > end) ((at i src) <= (at j src)))) {
      atPut k dst (at i src)
      i += 1
    } else {
      atPut k dst (at j src)
      j += 1
    }
    k += 1
  }
}

to list_circular n list {
  if (n < 1) {
    return (at ((size list) - ((absoluteValue n) % (size list))) list)
  } else {
    return (at (((n - 1) % (size list)) + 1) list)
  }
}

to list_contains aList aValue {
  for item aList {
    if (aValue == item) {return (booleanConstant true)}
  }
  return (booleanConstant false)
}

to list_filter src selectionFunction {
  local 'result' ('[data:makeList]')
  for item src {
    if (callCustomReporter selectionFunction ('[data:makeList]' item)) {'[data:addLast]' item result}
  }
  return result
}

to list_map aFunction src {
  local 'result' ('[data:makeList]')
  for item src {
    '[data:addLast]' (callCustomReporter aFunction ('[data:makeList]' item)) result
  }
  return result
}

to list_mergesort src {
  local 'len' (size src)
  local 'work list' (newList len)
  local 'width' 1
  repeatUntil (width >= len) {
    local 'i' 1
    repeatUntil (i > len) {
      '_list_mergeStep' src i (minimum (i + width) len) (minimum (i + ((2 * width) - 1)) len) (v 'work list')
      i += (2 * width)
    }
    comment 'Copy working list into the source list.'
    for i len {
      atPut i src (at i (v 'work list'))
    }
    width = (2 * width)
  }
}

to list_pick selection list {
  if (isType selection 'list') {
    local 'selected' ('[data:makeList]')
    for i selection {
      '[data:addLast]' (at i list) selected
    }
    return selected
  } else {
    local 'amount' (minimum (size list) (maximum 1 (((size list) * (at ('[data:find]' selection ('[data:makeList]' 'a few' 'some' 'most')) ('[data:makeList]' 20 50 80))) / 100)))
    return (list_sorted ('[data:copyFromTo]' (list_shuffled list) 1 amount))
  }
}

to list_replace 'a list' indices replacement {
  if (indices == '') {return (v 'a list')}
  local 'new list' ('[data:copyFromTo]' (v 'a list') 1)
  for i (ifExpression (isType indices 'list') indices ('[data:split]' ('[data:convertType]' indices 'string') ',')) {
    atPut i (v 'new list') replacement
  }
  return (v 'new list')
}

to list_reverse aList {
  local 'i' 1
  local 'j' (size aList)
  repeatUntil (i >= j) {
    local 'tmp' (at i aList)
    atPut i aList (at j aList)
    atPut j aList tmp
    i += 1
    j += -1
  }
}

to list_reversed list {
  local 'new list' ('[data:copyFromTo]' list 1)
  list_reverse (v 'new list')
  return (v 'new list')
}

to list_shuffle aList {
  local 'len' (size aList)
  for i len {
    local 'j' (random 1 len)
    local 'tmp' (at i aList)
    atPut i aList (at j aList)
    atPut j aList tmp
  }
}

to list_shuffled list {
  local 'new list' ('[data:copyFromTo]' list 1)
  list_shuffle (v 'new list')
  return (v 'new list')
}

to list_sorted list {
  local 'new list' ('[data:copyFromTo]' list 1)
  list_mergesort (v 'new list')
  return (v 'new list')
}

to list_unique list {
  local 'idx' 1
  repeatUntil (idx >= (size list)) {
    local 'item' (at idx list)
    local 'found' ('[data:find]' item list (idx + 1))
    repeatUntil (or (found == -1) (idx == found)) {
      '[data:delete]' found list
      found = ('[data:find]' item list (idx + 1))
    }
    idx += 1
  }
}

to list_uniqued list {
  local 'unique' ('[data:copyFromTo]' list 1)
  list_unique unique
  return unique
}


module MIDI Output
author MicroBlocks
version 1 11 
choices druminst 'Acoustic Bass Drum' 'Bass Drum 1' 'Side Stick' 'Acoustic Snare' 'Hand Clap' 'Electric Snare' 'Low Floor Tom' 'Closed Hi-Hat' 'High Floor Tom' 'Pedal Hi-Hat' 'Low Tom' 'Open Hi-Hat' 'Low-Mid Tom' 'Hi-Mid Tom' 'Crash Cymbal 1' 'High Tom' 'Ride Cymbal 1' 'Chinese Cymbal' 'Ride Bell' Tambourine 'Splash Cymbal' Cowbell 'Crash Cymbal 2' Vibraslap 'Ride Cymbal 2' 'Hi Bongo' 'Low Bongo' 'Mute Hi Conga' 'Open Hi Conga' 'Low Conga' 'High Timbale' 'Low Timbale' 'High Agogo' 'Low Agogo' Cabasa Maracas 'Short Whistle' 'Long Whistle' 'Short Guiro' 'Long Guiro' Claves 'Hi Wood Block' 'Low Wood Block' 'Mute Cuica' 'Open Cuica' 'Mute Triangle' 'Open Triangle' 
choices _midiPin USB 
choices instrument piano 'chromatic percussion' organ guitar bass strings ensemble brass reed pipe 'synth lead' 'synth pad' 'synth SFX' ethnic percussive SFX 
choices sfx 'guitar fret noise' 'guitar cut noise' 'string slap' 'flute key click' seashore rain thunder wind stream bubble bird dog horse 'telephone 1' 'telephone 2' 'door creaking' door scratch windchime helicopter 'car engine' 'car stop' 'car pass' 'car crash' siren train 'jet plane' starship 'burst noise' applause laughing screaming punch 'heart beat' footstep 'gun shot' 'machine gun' 'laser gun' explosion 
choices drumkits standard room power electronic 'TR-808' jazz brush orchestra SFX 'CM-64/CM-32L' 
choices controls 'bank select 1' 'bank select 2' modulation 'portamento time' volume pan expression hold portamento sostenuto soft resonance 'release time' 'attack time' cutoff 'decay time' 'vibrato rate' 'vibrato depth' 'vibrato delay' 'portamento control' 'effect 1' 'effect 2' 
description 'Control MIDI devices. By default, it interfaces the hardware serial port, but it also supports software serial and USB MIDI.

Software Serial Ports
---------------------
You can specify a software serial port using the `set MIDI pin` block. On most boards, however, the default serial pin is going to be pin 1, so there is no need to use the `set MIDI pin` block. Connect pin 5 of the MIDI DIN connector to the serial pin, and pin 4 of the MIDI DIN connector to 3.3v or 5v.

USB MIDI
--------
Alternatively, if you want to use the MIDI library to control a USB MIDI device -or a virtual synth running in your PC, even while MicroBlocks is running- you can do so by setting the `use USB MIDI` flag to true in the `set MIDI pin` block.
'
variables _MIDI_initialized _MIDI_pin _MIDI_drums 

  spec ' ' 'MIDI_play MIDI note' 'play MIDI note _ for _ ms on channel _ volume _' 'auto auto auto auto' 60 500 1 127
  spec ' ' 'MIDI_send note' 'set MIDI note _ to _ on channel _ volume _' 'auto bool auto auto' 60 true 1 127
  spec ' ' 'MIDI_stop all notes in channel' 'stop all notes on channel _' 'auto' 1
  space
  spec 'r' 'MIDI_note to MIDI' 'note _ octave _ to MIDI key' 'auto auto' 'c' 0
  space
  spec ' ' 'MIDI_select MIDI instrument' 'select MIDI instrument _ number _ for channel _ : variation _' 'menu.instrument menu.range:1-8 num num' 'bass' 2 1 127
  spec ' ' 'MIDI_raw select MIDI instrument' 'select MIDI instrument _ for channel _' 'num num' 23 2
  spec 'r' 'MIDI_instrument' 'instrument _ number _' 'menu.instrument menu.range:1-8' 'piano' 1
  spec ' ' 'MIDI_select MIDI drum kit' 'select MIDI drum kit _' 'menu.drumkits' 'brush'
  space
  spec ' ' 'MIDI_play MIDI drum' 'play MIDI drum _ for _ ms volume _' 'menu.druminst num num' 'Acoustic Snare' 100 80
  spec 'r' 'MIDI_drum note' 'drum _' 'menu.druminst' 'Ride Cymbal 2'
  space
  spec ' ' 'MIDI_change MIDI control' 'change MIDI control _ on channel _ to _' 'menu.controls auto auto' 'modulation' 1 127
  spec ' ' 'MIDI_pitch bend channel' 'pitch bend MIDI channel _ to _ %' 'auto auto' 1 -50
  space
  spec ' ' 'MIDI_send MIDI reset' 'send MIDI reset'
  space
  spec ' ' 'MIDI_send MIDI start playing' 'send MIDI start playing'
  spec ' ' 'MIDI_send MIDI stop playing' 'send MIDI stop playing'
  spec ' ' 'MIDI_send MIDI continue playing' 'send MIDI continue playing'
  space
  spec ' ' 'MIDI_set MIDI pin' 'set MIDI signal to pin _' 'auto._midiPin' 8
  space
  spec ' ' '_MIDI init' '_MIDI init'
  space
  spec ' ' '_MIDI command' '_MIDI command _ channel _ arg1 _ : arg2 _' 'num num num num' 9 1 60 127
  spec ' ' '_MIDI send bytes' '_MIDI send bytes _' 'auto' ''
  spec ' ' '_MIDI_NRPN' '_set MIDI NRPN MSB _ LSB _ on channel _ to _' 'auto auto auto auto auto auto' 1 33 1 100
  spec ' ' '_MIDI_Roland_control' '_set Roland control _ to _ on channel _' 'auto auto auto' 72 64 1
  space
  spec 'r' '_trimmedLowercase' '_trimmedLowercase _' 'str' 'A. b C...'

to 'MIDI_change MIDI control' control channel value {
  local 'controlChangeCmd' 11
  local 'controller' (at (ifExpression (isType control 'number') control ('[data:find]' control ('[data:makeList]' 'bank select 1' 'bank select 2' 'modulation' 'portamento time' 'volume' 'pan' 'expression' 'hold' 'portamento' 'sostenuto' 'soft' 'resonance' 'release time' 'attack time' 'cutoff' 'decay time' 'vibrato rate' 'vibrato depth' 'vibrato delay' 'portamento control' 'effect 1' 'effect 2'))) ('[data:makeList]' 0 32 1 5 7 10 11 64 65 66 67 71 72 73 74 75 76 77 78 84 91 93))
  comment 'Make sure Roland synths get these as NRPN messages'
  '_MIDI_Roland_control' controller value channel
  '_MIDI command' controlChangeCmd channel controller value
}

to 'MIDI_drum note' instrument {
  if (not (isType _MIDI_drums 'list')) {_MIDI_drums = ('[data:split]' 'Acoustic Bass Drum,Bass Drum 1,Side Stick,Acoustic Snare,Hand Clap,Electric Snare,Low Floor Tom,Closed Hi-Hat,High Floor Tom,Pedal Hi-Hat,Low Tom,Open Hi-Hat,Low-Mid Tom,Hi-Mid Tom,Crash Cymbal 1,High Tom,Ride Cymbal 1,Chinese Cymbal,Ride Bell,Tambourine,Splash Cymbal,Cowbell,Crash Cymbal 2,Vibraslap,Ride Cymbal 2,Hi Bongo,Low Bongo,Mute Hi Conga,Open Hi Conga,Low Conga,High Timbale,Low Timbale,High Agogo,Low Agogo,Cabasa,Maracas,Short Whistle,Long Whistle,Short Guiro,Long Guiro,Claves,Hi Wood Block,Low Wood Block,Mute Cuica,Open Cuica,Mute Triangle,Open Triangle' ',')}
  return (('[data:find]' instrument _MIDI_drums) + 34)
}

to MIDI_instrument instrument number {
  local 'categories' ('[data:split]' 'piano,chromatic percussion,organ,guitar,bass,strings,ensemble,brass,reed,pipe,synth lead,synth pad,synth SFX,ethnic,percussive,SFX' ',')
  return (((('[data:find]' instrument categories) - 1) * 8) + number)
}

to 'MIDI_note to MIDI' note octave {
  local 'noteNames' ('[data:makeList]' 'c' 'c#' 'd' 'd#' 'e' 'f' 'f#' 'g' 'g#' 'a' 'a#' 'b' 'c_' 'db' 'd_' 'eb' 'e_' 'e#' 'f_' 'gb' 'g_' 'ab' 'a_' 'bb' 'b_' 'b#')
  local 'midiKeys' ('[data:makeList]' 60 61 62 63 64 65 66 67 68 69 70 71 59 61 61 63 63 65 64 66 66 68 68 70 70 72)
  return ((at ('[data:find]' ('_trimmedLowercase' note) noteNames) midiKeys) + (octave * 12))
}

to 'MIDI_pitch bend channel' channel percent {
  local 'pitchBendCmd' 14
  local 'bendMSB' (maximum 0 (minimum (((64 * percent) / 100) + 64) 127))
  '_MIDI command' pitchBendCmd channel 0 bendMSB
}

to 'MIDI_play MIDI drum' drumName duration volume {
  if (isType drumName 'number') {
    'MIDI_send note' drumName true 10 volume
  } else {
    'MIDI_send note' ('MIDI_drum note' drumName) true 10 volume
  }
  waitMillis (duration - 3)
}

to 'MIDI_play MIDI note' 'midi note' duration channel volume {
  if (isType (v 'midi note') 'string') {
    waitMillis duration
  } else {
    'MIDI_send note' (v 'midi note') true channel volume
    waitMillis (duration - 3)
    'MIDI_send note' (v 'midi note') false channel 0
  }
}

to 'MIDI_raw select MIDI instrument' 'instrument number' channel {
  local 'programChangeCmd' 12
  '_MIDI command' programChangeCmd channel ((v 'instrument number') - 1)
}

to 'MIDI_select MIDI drum kit' drumkit {
  local 'programChangeCmd' 12
  '_MIDI command' programChangeCmd 10 ((at ('[data:find]' drumkit ('[data:split]' 'standard,room,power,electronic,TR-808,jazz,brush,orchestra,SFX,CM-64/CM-32L' ',')) ('[data:split]' '1,9,17,25,26,33,41,49,57,128' ',')) - 1)
}

to 'MIDI_select MIDI instrument' 'instrument type' 'instrument number' channel variation {
  local 'programChangeCmd' 12
  'MIDI_change MIDI control' 'bank select 1' channel variation
  '_MIDI command' programChangeCmd channel (MIDI_instrument (v 'instrument type') (v 'instrument number'))
}

to 'MIDI_send MIDI continue playing' {
  '_MIDI send bytes' (hexToInt 'FB')
}

to 'MIDI_send MIDI reset' {
  '_MIDI send bytes' (hexToInt 'FF')
  '_MIDI send bytes' ('[data:makeList]' (hexToInt 'F0') (hexToInt '7E') (hexToInt '7F') (hexToInt '09') (hexToInt '01') (hexToInt 'F7'))
  '_MIDI send bytes' ('[data:makeList]' (hexToInt 'F0') (hexToInt '41') (hexToInt '10') (hexToInt '42') (hexToInt '12') (hexToInt '40') (hexToInt '00') (hexToInt '7F') (hexToInt '00') (hexToInt '41') (hexToInt 'F7'))
  comment 'Turn off all notes on all channels'
  for chan 16 {
    for key 128 {
      'MIDI_send note' (key - 1) false chan 0
    }
  }
}

to 'MIDI_send MIDI start playing' {
  '_MIDI send bytes' (hexToInt 'FA')
}

to 'MIDI_send MIDI stop playing' {
  '_MIDI send bytes' (hexToInt 'FC')
}

to 'MIDI_send note' 'midi note' on/off channel volume {
  if (isType (v 'midi note') 'list') {
    for note (v 'midi note') {
      'MIDI_send note' note on/off channel volume
    }
  } else {
    local 'noteOnMsg' 9
    if on/off {
      '_MIDI command' noteOnMsg channel (v 'midi note') volume
    } else {
      '_MIDI command' noteOnMsg channel (v 'midi note') 0
    }
  }
}

to 'MIDI_set MIDI pin' pin {
  '[serial:close]'
  if ('USB' == pin) {
    _MIDI_pin = 'USB'
  } else {
    if (isType pin 'list') {
      _MIDI_pin = pin
    } else {
      _MIDI_pin = ('[data:makeList]' ('[data:makeList]' pin ('[data:range]' 1 16)))
    }
  }
  _MIDI_initialized = (booleanConstant false)
  '_MIDI init'
}

to 'MIDI_stop all notes in channel' channel {
  for i 127 {
    'MIDI_send note' i false channel 0
  }
}

to '_MIDI command' cmd channel arg1 arg2 {
  '_MIDI init'
  local 'cmdByte' ((cmd << 4) | ((channel - 1) & 15))
  local 'oneArgByte' ((pushArgCount) < 4)
  if (_MIDI_pin == 0) {
    if oneArgByte {
      '[serial:write]' ('[data:makeList]' cmdByte arg1)
    } else {
      '[serial:write]' ('[data:makeList]' cmdByte arg1 arg2)
    }
  } (_MIDI_pin == 'USB') {
    if oneArgByte {
      '[serial:midiSend]' cmdByte arg1
    } else {
      '[serial:midiSend]' cmdByte arg1 arg2
    }
  } else {
    for map _MIDI_pin {
      if (('[data:find]' channel (at 2 map)) > 0) {
        '[io:softWriteByte]' cmdByte (at 1 map) 31250
        '[io:softWriteByte]' arg1 (at 1 map) 31250
        if (not oneArgByte) {
          '[io:softWriteByte]' arg2 (at 1 map) 31250
        }
      }
    }
  }
}

to '_MIDI init' {
  if (not _MIDI_initialized) {
    if (_MIDI_pin == 0) {
      '[serial:open]' 31250
    } else {
      '[serial:close]'
    }
    _MIDI_initialized = (booleanConstant true)
  }
}

to '_MIDI send bytes' byteList {
  '_MIDI init'
  if (isType byteList 'number') {
    byteList = ('[data:makeList]' byteList)
  }
  for byte byteList {
    if (_MIDI_pin == 0) {
      '[serial:write]' byte
    } (_MIDI_pin == 'USB') {
      '[serial:midiSend]' byte
    } else {
      for map _MIDI_pin {
        '[io:softWriteByte]' byte (at 1 map) 31250
      }
    }
  }
}

to '_MIDI_NRPN' msb lsb channel value {
  '_MIDI command' 11 channel 99 msb
  '_MIDI command' 11 channel 98 lsb
  '_MIDI command' 11 channel 6 value
}

to '_MIDI_Roland_control' control value channel {
  if (control == 71) {
    '_MIDI_NRPN' 1 33 channel value
  } (control == 72) {
    '_MIDI_NRPN' 1 102 channel value
  } (control == 73) {
    '_MIDI_NRPN' 1 99 channel value
  } (control == 74) {
    '_MIDI_NRPN' 1 32 channel value
  } (control == 75) {
    '_MIDI_NRPN' 1 100 channel value
  }
}

to '_trimmedLowercase' s {
  comment 'Return a copy of the given string without whitespace
or periods and all lowercase.'
  local 'result' (newList (size s))
  '[data:delete]' 'all' result
  for i (size s) {
    local 'ch' ('[data:unicodeAt]' i s)
    if (and (ch > 32) (ch != 46)) {
      if (and (65 <= ch) (ch <= 90)) {ch = (ch + 32)}
      '[data:addLast]' ch result
    }
  }
  return ('[data:unicodeString]' result)
}


module Rhythm Control
author MicroBlocks
version 2 4 
description 'Keeps time according to a tempo and time signature. Useful to create musical patterns.

Includes abstractions for note durations, bars and beats.
'
variables _rhy_tempo _rhy_bars _rhy_beat_duration _rhy_measures _rhy_reference_note 

  spec ' ' 'rhy_set tempo' 'set tempo to _ bpm at _ / _ signature' 'num num num' 250 4 4
  spec ' ' 'rhy_set bars' 'set pattern to _ bars' 'num' 16
  space
  spec 'r' 'rhy_current bar' 'current bar'
  spec 'r' 'rhy_current beat' 'current beat'
  space
  spec ' ' 'rhy_wait until next' 'wait until next _ duration' 'num'
  spec ' ' 'rhy wait until beat' 'wait until beat _' 'num' 3
  spec ' ' 'rhy wait until bar' 'wait until bar _' 'num' 2
  space
  spec 'r' 'rhy_whole duration' '#SVG#note-whole'
  spec 'r' 'rhy_half duration' '#SVG#note-half'
  spec 'r' 'rhy_quarter duration' '#SVG#note-quarter'
  spec 'r' 'rhy_eighth duration' '#SVG#note-eighth'
  spec 'r' 'rhy_sixteenth duration' '#SVG#note-sixteenth'
  space
  spec 'r' 'rhy_dotted' '_ .' 'auto' ''
  spec 'r' 'rhy_triplet' '‿³ _' 'auto' ''
  space
  spec 'r' '_rhy duration of note value' '_rhy duration of note value _' 'auto' 4
  spec 'r' '_rhy 2 ^' '_rhy 2 ^ _' 'auto' '10'
  spec 'r' '_rhy between' '_rhy _ between _ and _' 'auto auto auto' '10' '10' '10'

to '_rhy 2 ^' n {
  local 'result' 1
  repeat n {
    result = (result * 2)
  }
  return result
}

to '_rhy between' foo a b {
  return (and (foo >= a) (foo <= b))
}

to '_rhy duration of note value' 'note value' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 250 4 4}
  return ((_rhy_beat_duration * _rhy_reference_note) / (v 'note value'))
}

to 'rhy wait until bar' 'bar number' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 250 4 4}
  if (_rhy_bars == 0) {'rhy_set bars' 16}
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'round duration' ((v 'bar duration') * _rhy_bars)
  local 'wakeTime' (((v 'round duration') * (((millisOp) / (v 'round duration')) + 1)) + (((v 'bar number') - 1) * (v 'bar duration')))
  waitMillis ((wakeTime - (millisOp)) % (v 'round duration'))
}

to 'rhy wait until beat' 'beat number' {
  if (_rhy_beat_duration == 0) {'rhy_set tempo' 250 4 4}
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'wakeTime' (((v 'bar duration') * (((millisOp) / (v 'bar duration')) + 1)) + (((v 'beat number') - 1) * _rhy_beat_duration))
  waitMillis ((wakeTime - (millisOp)) % (v 'bar duration'))
}

to 'rhy_current bar' {
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  local 'round duration' ((v 'bar duration') * _rhy_bars)
  return ((((millisOp) % (v 'round duration')) / (v 'bar duration')) + 1)
}

to 'rhy_current beat' {
  local 'bar duration' (_rhy_measures * _rhy_beat_duration)
  return ((((millisOp) % (v 'bar duration')) / _rhy_beat_duration) + 1)
}

to rhy_dotted duration {
  return (duration + (duration / 2))
}

to 'rhy_eighth duration' {
  return ('_rhy duration of note value' 8)
}

to 'rhy_half duration' {
  return ('_rhy duration of note value' 2)
}

to 'rhy_quarter duration' {
  return ('_rhy duration of note value' 4)
}

to 'rhy_set bars' bars {
  if (_rhy_measures == 0) {'rhy_set tempo' 240 4 4}
  _rhy_bars = bars
}

to 'rhy_set tempo' tempo measures 'note value' {
  _rhy_tempo = tempo
  _rhy_reference_note = (v 'note value')
  _rhy_beat_duration = (60000 / _rhy_tempo)
  _rhy_measures = measures
}

to 'rhy_sixteenth duration' {
  return ('_rhy duration of note value' 16)
}

to rhy_triplet duration {
  return ((duration * 2) / 3)
}

to 'rhy_wait until next' duration {
  local 'wakeTime' (duration * (((millisOp) / duration) + 1))
  waitMillis (wakeTime - (millisOp))
}

to 'rhy_whole duration' {
  return ('_rhy duration of note value' 1)
}

